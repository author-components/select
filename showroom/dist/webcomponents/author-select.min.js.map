{"version":3,"file":"author-select.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorSelectElement extends AuthorMenuElement {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    this.UTIL.defineProperties({\n      middleware: {\n        private: true,\n        default: {\n          beforeChange: null,\n          afterChange: null\n        }\n      },\n\n      selectedOptionsElement: {\n        readonly: true,\n        get: () => this.querySelector('author-selected-options')\n      },\n\n      type: {\n        readonly: true,\n        get: () => this.multiple ? 'select-multiple' : 'select-one'\n      }\n    })\n\n    this.UTIL.registerListeners(this, {\n      'attribute.change': evt => {\n        let { attribute, oldValue, newValue } = evt.detail\n\n        if (newValue === oldValue) {\n          return\n        }\n\n        switch (attribute) {\n          case 'multiple': return this.emit('state.change', {\n            name: 'multiple',\n            value: this.multiple\n          })\n\n          case 'placeholder':\n            if (this.selectedOptionsElement) {\n              this.selectedOptionsElement.update()\n            }\n\n            break\n        }\n      },\n\n      'options.selected': evt => this.emit('options.selected', evt.detail.options, this.selectedOptionsElement)\n    })\n  }\n\n  static get observedAttributes () {\n    return ['autofocus', 'disabled', 'multiple', 'name', 'open', 'placeholder', 'tabindex', 'size']\n  }\n\n  clear () {\n    super.clear()\n    this.selectedOptionsElement.clear()\n  }\n\n  inject (sourceElement, labels = null) {\n    super.inject(sourceElement, labels)\n\n    if (sourceElement.localName === 'select') {\n      let selectedOptionsElement = document.createElement('author-selected-options')\n      selectedOptionsElement.slot = 'selectedoptions'\n      this.appendChild(selectedOptionsElement)\n\n      if (!this.multiple) {\n        this.selectedOptionsElement.add(this.optionsElement.options[this.selectedIndex])\n      }\n    }\n  }\n}\n\ncustomElements.define('author-select', AuthorSelectElement)\n\nexport default AuthorSelectElement\n"],"names":["AuthorSelectElement","AuthorMenuElement","[object Object]","super","this","UTIL","defineProperties","middleware","private","default","beforeChange","afterChange","selectedOptionsElement","readonly","get","querySelector","type","multiple","registerListeners","attribute.change","evt","attribute","oldValue","newValue","detail","emit","name","value","update","options.selected","options","observedAttributes","clear","sourceElement","labels","inject","localName","document","createElement","slot","appendChild","add","optionsElement","selectedIndex","customElements","define"],"mappings":"+yBAAA,MAAMA,UAA4BC,kBAChCC,cACEC,MAAM,mjBAENC,KAAKC,KAAKC,iBAAiB,CACzBC,WAAY,CACVC,SAAS,EACTC,QAAS,CACPC,aAAc,KACdC,YAAa,OAIjBC,uBAAwB,CACtBC,UAAU,EACVC,IAAK,IAAMV,KAAKW,cAAc,4BAGhCC,KAAM,CACJH,UAAU,EACVC,IAAK,IAAMV,KAAKa,SAAW,kBAAoB,gBAInDb,KAAKC,KAAKa,kBAAkBd,KAAM,CAChCe,mBAAoBC,IAClB,IAAIC,UAAEA,EAASC,SAAEA,EAAQC,SAAEA,GAAaH,EAAII,OAE5C,GAAID,IAAaD,EAIjB,OAAQD,GACN,IAAK,WAAY,OAAOjB,KAAKqB,KAAK,eAAgB,CAChDC,KAAM,WACNC,MAAOvB,KAAKa,WAGd,IAAK,cACCb,KAAKQ,wBACPR,KAAKQ,uBAAuBgB,WAOpCC,mBAAoBT,GAAOhB,KAAKqB,KAAK,mBAAoBL,EAAII,OAAOM,QAAS1B,KAAKQ,0BAItFmB,gCACE,MAAO,CAAC,YAAa,WAAY,WAAY,OAAQ,OAAQ,cAAe,WAAY,QAG1F7B,QACEC,MAAM6B,QACN5B,KAAKQ,uBAAuBoB,QAG9B9B,OAAQ+B,EAAeC,EAAS,MAG9B,GAFA/B,MAAMgC,OAAOF,EAAeC,GAEI,WAA5BD,EAAcG,UAAwB,CACxC,IAAIxB,EAAyByB,SAASC,cAAc,2BACpD1B,EAAuB2B,KAAO,kBAC9BnC,KAAKoC,YAAY5B,GAEZR,KAAKa,UACRb,KAAKQ,uBAAuB6B,IAAIrC,KAAKsC,eAAeZ,QAAQ1B,KAAKuC,yBAMzEC,eAAeC,OAAO,gBAAiB7C"}